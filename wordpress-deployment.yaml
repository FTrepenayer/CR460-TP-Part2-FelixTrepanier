apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - image: wordpress:4.7.3-apache
          name: web
          env:
            - name: WORDPRESS_DB_HOST
              # Connexion au serveur SQL Proxy
              # Container s'executant en parralel dans le même pod que l'application Wordpress
              # Connexion au SQL Proxy en pointant sur l'adresse loopback (même pod que l'application)
              value: 127.0.0.1:3306
            # Secret pour établir une connexion sécurisé
            # "cloudsql-db-credentials" - objet the type 'secret' avec user/pass DB
            # Creation de l'utilisateur sur GCP sur l'instance SQL au prealable
            # [START cloudsql_secrets]
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            # [END cloudsql_secrets]
          ports:
            - containerPort: 80
              name: wordpress
        # $PROJECT:$REGION:$INSTANCE
        # Insert the port number used by your database.
        # [START proxy_container]
        - image: gcr.io/cloudsql-docker/gce-proxy:1.09
          name: cloudsql-proxy
          command: ['/cloud_sql_proxy', '--dir=/cloudsql',
                    '-instances=cr460-ftrepenayer:us-east1:wp-db=tcp:3306',
                    '-credential_file=/secrets/cloudsql/credentials.json']
        # "cloudsql-instance-credentials" - secret basé sur un "Service Account" de GCP
        # Generation de "cloudsql-instance-credentials" avec le fichier JSON.
        # kubectl create secret generic cloudsql-instance-credentials \ --from-file=credentials.json=[PROXY_KEY_FILE_PATH]
        # Utilisation d'un volume pour l'utilisation du fichier JSON sur le conteneur SQL Proxy
        # connexion sur TLS sur le 'Service Account' avec les droits nécessaires pour SQLkube
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
            - name: ssl-certs
              mountPath: /etc/ssl/certs
            - name: cloudsql
              mountPath: /cloudsql
        # [END proxy_container]
      # [START volumes]
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
        - name: cloudsql
          emptyDir:
      # [END volumes]

